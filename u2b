#!/usr/bin/perl
# Copyright: SZABO Gergely <szg@subogero.com>, GNU LGPL v2.1
use strict;
use warnings;
use JSON::XS;
use YAML;
use WWW::U2B qw(search extract_streams playback download uid);

sub print_html; sub print_json; sub print_yaml; sub print_ini;
sub help {
    print <<HELP;
HELP
    exit shift;
}

help 0 if $ARGV[0] eq '-h';
if ($ARGV[0] eq '-v') {
    print <<'VERSION';
u2b 0.0

Free software, distributed under the LGPL 2.1 license
Copyright 2013-2015 SZABO Gergely <szg@subogero.com>
VERSION
    exit 0
}

# Format
my $format = 'yaml';
if ($ARGV[0] eq '-f') {
    shift;
    $format = shift;
}

# Verb, video, search terms
my ($verb, $video, $index, $search);
if (@ARGV == 1) {
    $video = shift;
} else {
    my $cmd = shift;
    if ($cmd =~ /^([A-Za-z])?((\d+)?s)$/) {
        ($verb, $search, $index) = ($1, $2, $3);
    } elsif ($cmd =~ /^\w$/) {
        $verb = $cmd;
    } else {
        print "Invalid command '$cmd'\n";
        help 1;
    }
    $video = shift unless $search;
}
if ($video) {
    $video = uid $video;
    $search = '0s';
    $index = 0;
}
#print "vid: $video, verb: $verb, search: $search, index: $index\n";

# Search
my @hits = search $video || @ARGV;
die "Not enough search hits for $index\n" if defined $index && $index >= @hits;
@hits = ($hits[$index]) if !$verb && defined $index;

# Verb player mapping
my %player_map = (
    l => 'omxplayer -olocal',
    h => 'omxplayer -ohdmi',
    I => 'omxd I',
    J => 'omxd J',
    H => 'omxd H',
    m => 'mplayer -fs',
);
my $cfg_player_map = eval { YAML::LoadFile '/etc/u2b.yml' };
@player_map{keys %$cfg_player_map} = values %$cfg_player_map;
$cfg_player_map = eval { YAML::LoadFile "$ENV{HOME}/.u2b.yml" };
@player_map{keys %$cfg_player_map} = values %$cfg_player_map;
$cfg_player_map = eval { YAML::LoadFile '.u2b.yml' };
@player_map{keys %$cfg_player_map} = values %$cfg_player_map;

# Do verb or display data
if ($verb) {
    $index = 0 unless defined $index;
    my @streams = extract_streams $hits[$index]->{name};
    if ($verb eq 'u') {
        print $streams[0]->{url};
    } elsif ($verb eq 'a') {
        print Dump \@streams;
    } elsif ($verb eq 'd') {
        download $hits[$index], $streams[0];
    } elsif ($player_map{$verb}) {
        playback $player_map{$verb}, $streams[0];
    } else {
        die "Verb $verb not mapped to any player";
    }
} elsif ($format eq 'html') {
    print_html @hits;
} elsif ($format eq 'json') {
    print_json @hits;
} elsif ($format eq 'yaml') {
    print_yaml @hits;
} elsif ($format eq 'ini') {
    print_ini @hits;
} else {
    help 1;
}

# Pretty printers
sub print_html {
    foreach (@_) {
        print <<EOF;
<p>
<a href="$_->{name}">$_->{label}</a>
<br>
<img src="$_->{thumbnail}"/>
</p>
EOF
    }
}

sub print_json {
    print encode_json(\@_);
}

sub print_yaml {
    print Dump(\@_);
}

sub print_ini {
    my $i = 0;
    foreach (@_) {
        print <<EOF;
[$i]
label=$_->{label}
name=$_->{name}
thumbnail=$_->{thumbnail}
EOF
        $i++;
    }
}
